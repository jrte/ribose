#May 15 07:58:52 kb-ubuntu kernel: [ 1794.599801] DROPPED IN=eth0 OUT= MAC=01:00:5e:00:00:fb:00:13:20:c0:36:32:08:00 SRC=192.168.144.101 DST=224.0.0.251 LEN=32 TOS=0x00 PREC=0x00 TTL=1 ID=8596 OPT (94040000) PROTO=2 

value = {alpha, digit, punct};

datetime = upper lower+ space digit+ space (digit+ ':')+ digit+;

header = (
	(datetime @@ PasteAny)
	(space, select[`~hostname`])
	(value* @@ PasteAny) 
	(space 'kernel: [' (space* digit+ '.' digit+) ']')
);

tag = (space, select[`~tag`]) (('DROPPED' | 'LIMITED' | 'ABORTED') @@ PasteAny);

capture = (
	(
		(space)
		(
			(
				('IN=', select[`~in`])
			|	('OUT=', select[`~out`])
			|	('MAC=', select[`~macaddress`])
			|	('SRC=', select[`~srcip`])
			|	('DST=', select[`~dstip`])
			|	('SPT=', select[`~srcport`])
			|	('DPT=', select[`~dstport`]) 
			|	('PROTO=', select[`~protocol`])
			)
			(value* @@ PasteAny)
		||	value*
		)
	)+
	(space)
);

line = header tag capture;

l0 = (line$0):alph;
l1 = (line$1):alph;
l2 = (line$2):alph;

linenul = (
	(
			((AnyButNlOrNul* @ line)$(0 1 2))
		@	((l0$(0,0))* (l1$(0,,0))* (l2$(0,,,0))*)* (nul$(0,0)) (nul* l0* l1* l2*)* 
	)
	(nul* notnl*)*
);

store = out[`~tag` space `~timestamp` space `~hostname` space `~in` space `~out` space `~macaddress` space `~srcip` space `~dstip` space `~protocol` space `~srcport` space `~dstport` `\n`];

LinuxKernel = (
	(nil, clear[`~*`] select[`~timestamp`]) 
	(
		line (nl, store clear[`~*`] select[`~timestamp`])
	|	linenul (nl, clear[`~*`] select[`~timestamp`])
	)*
);

# Fact check. If A is empty, ginr will print nothing for (`NOT empty` A):enum;

`*** LinuxKernel: NOT The domain of LinuxKernel restricted to text input (eliding signals other than nul) is (notnl* nl)*:` 
		((notnl* nl*)* ! (nil \ (LinuxKernel$0)) @ ((any$(0,0))* (nul, notnl))*):enum;

`*** LinuxKernel: NOT The image of matched lines on the range of LinuxKernel is contained in (((clear select)* out clear select)*):` 
		((nil ((line$0) nl)* @ (LinuxKernel$(0,1))) - (clear (select paste*)* out)* clear select):enum;

`*** LinuxKernel: NOT The image of unmatched lines on the range of LinuxKernel is (clear select (paste* clear select)*):` 
		((((AnyButNulOrNl* @ (line$(0,0))) - any* (line$0) nl any*)* @ (LinuxKernel$(0,1))) ^ (clear (select paste*)*)* clear select):enum;

`*** LinuxKernel: NOT The domain image of effector sequences in the range of LinuxKernel that do not invoke the out effector is empty:` 
		(line$(0,1)) @ ((nil (line$0) nl @ (LinuxKernel$(0,1))) - (l1* out clear select)):enum;
		
### LinuxKernelStrict 
# This will mark input at start of line and look ahead using the input patterns of 3 transducers
# describing lines of interest up to and including nl. If any of these patterns match the entire 
# line, the input is reset to the mark and the matching transducer is started to consume the line.
# If a domain error occurs the nul signal will be caught and the remainder of the line consumed 
# without effect.
###

LinuxKernelDropped = (
	header (space, select[`~tag`]) ('DROPPED' @@ PasteAny) capture (nl, store in[`!nil`] stop)
);

LinuxKernelLimited = (
	header (space, select[`~tag`]) ('LIMITED' @@ PasteAny) capture (nl, store in[`!nil`] stop)
);

LinuxKernelAborted = (
	header (space, select[`~tag`]) ('ABORTED' @@ PasteAny) capture (nl, store in[`!nil`] stop)
);

LinuxKernelPrefix = (((LinuxKernelDropped$0) | (LinuxKernelLimited$0) | (LinuxKernelAborted$0)) / nl);

LinuxKernelStrict = (
	(
		(nil, mark clear[`~*`] select[`~timestamp`])
		(
			(
				((LinuxKernelDropped$0), reset start[`@LinuxKernelDropped`])
			|	((LinuxKernelLimited$0), reset start[`@LinuxKernelLimited`])
			|	((LinuxKernelAborted$0), reset start[`@LinuxKernelAborted`])
			)
		|	(LinuxKernelPrefix:pref) nul notnl* (nl, in[`!nil`])
		)
	)*
);

### LinuxKernelLoose 
# This will mark and look ahead only far enough to choose capable transducer 
# (assuming rest will match without domain error) or eat line. If a domain
# error occurs nul will be signaled but not caught, so the transduction
# will throw a DoomainErrorException.
###

prefix = (header tag);

LinuxKernelCapture = (LinuxKernelDropped | LinuxKernelLimited | LinuxKernelAborted);

LinuxKernelLoose = (
	(
		(nil, mark clear[`~*`] select[`~timestamp`]) 
		(
			((prefix$0), reset start[`@LinuxKernelCapture`])
		||	(((prefix$0) / ((prefix$0):alph)):pref)
			nul notnl* (nl, in[`!nil`])
		)
	)*
);

LinuxKernelDropped:save		`LinuxKernelDropped.dfa`;
LinuxKernelDropped:pr		`LinuxKernelDropped.pr`;
LinuxKernelLimited:save		`LinuxKernelLimited.dfa`;
LinuxKernelLimited:pr		`LinuxKernelLimited.pr`;
LinuxKernelAborted:save		`LinuxKernelAborted.dfa`;
LinuxKernelAborted:pr		`LinuxKernelAborted.pr`;
LinuxKernelLoose:save		`LinuxKernelLoose.dfa`;
LinuxKernelLoose:pr			`LinuxKernelLoose.pr`;
LinuxKernelStrict:save		`LinuxKernelStrict.dfa`;
LinuxKernelStrict:pr			`LinuxKernelStrict.pr`;
LinuxKernelCapture:save		`LinuxKernelCapture.dfa`;
LinuxKernelCapture:pr		`LinuxKernelCapture.pr`;
LinuxKernel:save				`LinuxKernel.dfa`;
LinuxKernel:pr					`LinuxKernel.pr`;
