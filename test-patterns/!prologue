ctrl = {
	('\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f':alph),
	('\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f':alph),
	('\x7f')
};

space = ' ';
dot='.';
dash='-';
comma=',';
backslash = '\\';
quote = '\'';
digit = '0123456789':alph;
punct = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~':alph;
nl = '\x0a';
cr = '\x0d';
tab ='\t';

letters = {
	(a,A),
	(b,B),
	(c,C),
	(d,D),
	(e,E),
	(f,F),
	(g,G),
	(h,H),
	(i,I),
	(j,J),
	(k,K),
	(l,L),
	(m,M),
	(n,N),
	(o,O),
	(p,P),
	(q,Q),
	(r,R),
	(s,S),
	(t,T),
	(u,U),
	(v,V),
	(w,W),
	(x,X),
	(y,Y),
	(z,Z)
};

lower = letters$0;
upper = letters$1;
alpha = lower | upper;
alnum = alpha | digit;
black = alnum | punct;
white = space | tab;
print = black | white;
symbol = alnum | '_';

hexlower = digit | 'abcdef':alph;
hexupper = digit | 'ABCDEF':alph;
hexbyte = (hexupper:2) | (hexlower:2);

ipoctet = {digit, (digit - 0) digit, {1,2} digit digit};
iphost = ((black - dot)+ dot)* (black - dot)+;
ipV4 = ((ipoctet dot):3) ipoctet;
ipV4OrHost = (ipV4 || iphost);

# Extend any transducer T to accept nul in any state using (N = AnyOrNul @@ T)
AnyOrNul = {
	(nul|'\x00','\x00'), (nul|'\x01','\x01'), (nul|'\x02','\x02'), (nul|'\x03','\x03'), 
	(nul|'\x04','\x04'), (nul|'\x05','\x05'), (nul|'\x06','\x06'), (nul|'\x07','\x07'),
	(nul|'\x08','\x08'), (nul|'\x09','\x09'), (nul|'\x0a','\x0a'), (nul|'\x0b','\x0b'),
	(nul|'\x0c','\x0c'), (nul|'\x0d','\x0d'), (nul|'\x0e','\x0e'), (nul|'\x0f','\x0f'),
	(nul|'\x10','\x10'), (nul|'\x11','\x11'), (nul|'\x12','\x12'), (nul|'\x13','\x13'),
	(nul|'\x14','\x14'), (nul|'\x15','\x15'), (nul|'\x16','\x16'), (nul|'\x17','\x17'),
	(nul|'\x18','\x18'), (nul|'\x19','\x19'), (nul|'\x1a','\x1a'), (nul|'\x1b','\x1b'),
	(nul|'\x1c','\x1c'), (nul|'\x1d','\x1d'), (nul|'\x1e','\x1e'), (nul|'\x1f','\x1f'),
	(nul|' ',' '), (nul|'0','0'), (nul|'1','1'), (nul|'2','2'),
	(nul|'3','3'), (nul|'4','4'), (nul|'5','5'), (nul|'6','6'),
	(nul|'7','7'), (nul|'8','8'), (nul|'9','9'), (nul|'a','a'),
	(nul|'b','b'), (nul|'c','c'), (nul|'d','d'), (nul|'e','e'),
	(nul|'f','f'), (nul|'g','g'), (nul|'h','h'), (nul|'i','i'),
	(nul|'j','j'), (nul|'k','k'), (nul|'l','l'), (nul|'m','m'),
	(nul|'n','n'), (nul|'o','o'), (nul|'p','p'), (nul|'q','q'),
	(nul|'r','r'), (nul|'s','s'), (nul|'t','t'), (nul|'u','u'),
	(nul|'v','v'), (nul|'w','w'), (nul|'x','x'), (nul|'y','y'),
	(nul|'z','z'), (nul|'A','A'), (nul|'B','B'), (nul|'C','C'),
	(nul|'D','D'), (nul|'E','E'), (nul|'F','F'), (nul|'G','G'),
	(nul|'H','H'), (nul|'I','I'), (nul|'J','J'), (nul|'K','K'),
	(nul|'L','L'), (nul|'M','M'), (nul|'N','N'), (nul|'O','O'),
	(nul|'P','P'), (nul|'Q','Q'), (nul|'R','R'), (nul|'S','S'),
	(nul|'T','T'), (nul|'U','U'), (nul|'V','V'), (nul|'W','W'),
	(nul|'X','X'), (nul|'Y','Y'), (nul|'Z','Z'), (nul|'!','!'),
	(nul|'"','"'), (nul|'#','#'), (nul|'$','$'), (nul|'%','%'),
	(nul|'&','&'), ((nul|'\''),'\''), (nul|'(','('), (nul|')',')'),
	(nul|'*','*'), (nul|'+','+'), (nul|',',','), (nul|'-','-'),
	(nul|'.','.'), (nul|'/','/'), (nul|':',':'), (nul|';',';'),
	(nul|'<','<'), (nul|'=','='), (nul|'>','>'), (nul|'?','?'),
	(nul|'@','@'), (nul|'[','['), (nul|'\\','\\'), (nul|']',']'),
	(nul|'^','^'), (nul|'_','_'), (nul|'`','`'), (nul|'{','{'),
	(nul|'|','|'), (nul|'}','}'), (nul|'~','~'), (nul|'\x7f','\x7f')
};

utf7 = (AnyOrNul$0) - nul;
notnl = utf7 - nl;

# Restrict PasteAny to any pattern P (T = P @@ PasteAny); T will paste P-matching input into current selection
PasteAny = (utf7, paste)*;

# Restrict AnyOrNul to exclude nul extension for nl, eg (NotNlOrNul @@ T) ((nl, out[..] end) | (nul notnl* nl, end))
NotNlOrNul = AnyOrNul @@ notnl;
