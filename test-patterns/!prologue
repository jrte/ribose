ctrl = {
	('\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f':alph),
	('\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f':alph),
	('\x7f')
};

space = ' ';
nl = '\x0a';
cr = '\x0d';
tab ='\t';
backslash = '\\';
quote = '\'';
dot = '.';

digit = '0123456789':alph;
lower = 'abcdefghijklmnopqrstuvwxyz':alph;
upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':alph;
punct = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~':alph;
alpha = lower | upper;
alnum = alpha | digit;
black = alnum | punct;
white = space | tab;
print = black | white;

hexlower = digit | 'abcdef':alph;
hexupper = digit | 'ABCDEF':alph;
hexbyte = (hexupper:2) | (hexlower:2);

ipoctet = {digit, (digit - 0) digit, {1,2} digit digit};
iphost = ((black - dot)+ dot)* (black - dot)+;
ipV4 = ((ipoctet dot):3) ipoctet;
ipV4OrHost = (ipV4 || iphost);

symbol = alnum | '_';
text = print - tab;
any = ctrl | text;
notnl = any - nl;

# Restrict PasteAny to any pattern P (T = P @@ PasteAny); T will paste P-matching input into current selection
PasteAny = (any, paste)*;

# Extend any transducer T to accept nul in any state using (AnyOrNul @@ T) ((nil, out[..] end) | (nul notnl* nl, end))
AnyOrNul = {
	(nul|'\x00','\x00'), (nul|'\x01','\x01'), (nul|'\x02','\x02'), (nul|'\x03','\x03'), 
	(nul|'\x04','\x04'), (nul|'\x05','\x05'), (nul|'\x06','\x06'), (nul|'\x07','\x07'),
	(nul|'\x08','\x08'), (nul|'\x09','\x09'), (nul|'\x0a','\x0a'), (nul|'\x0b','\x0b'),
	(nul|'\x0c','\x0c'), (nul|'\x0d','\x0d'), (nul|'\x0e','\x0e'), (nul|'\x0f','\x0f'),
	(nul|'\x10','\x10'), (nul|'\x11','\x11'), (nul|'\x12','\x12'), (nul|'\x13','\x13'),
	(nul|'\x14','\x14'), (nul|'\x15','\x15'), (nul|'\x16','\x16'), (nul|'\x17','\x17'),
	(nul|'\x18','\x18'), (nul|'\x19','\x19'), (nul|'\x1a','\x1a'), (nul|'\x1b','\x1b'),
	(nul|'\x1c','\x1c'), (nul|'\x1d','\x1d'), (nul|'\x1e','\x1e'), (nul|'\x1f','\x1f'),
	(nul|' ',' '), (nul|'0','0'), (nul|'1','1'), (nul|'2','2'),
	(nul|'3','3'), (nul|'4','4'), (nul|'5','5'), (nul|'6','6'),
	(nul|'7','7'), (nul|'8','8'), (nul|'9','9'), (nul|'a','a'),
	(nul|'b','b'), (nul|'c','c'), (nul|'d','d'), (nul|'e','e'),
	(nul|'f','f'), (nul|'g','g'), (nul|'h','h'), (nul|'i','i'),
	(nul|'j','j'), (nul|'k','k'), (nul|'l','l'), (nul|'m','m'),
	(nul|'n','n'), (nul|'o','o'), (nul|'p','p'), (nul|'q','q'),
	(nul|'r','r'), (nul|'s','s'), (nul|'t','t'), (nul|'u','u'),
	(nul|'v','v'), (nul|'w','w'), (nul|'x','x'), (nul|'y','y'),
	(nul|'z','z'), (nul|'A','A'), (nul|'B','B'), (nul|'C','C'),
	(nul|'D','D'), (nul|'E','E'), (nul|'F','F'), (nul|'G','G'),
	(nul|'H','H'), (nul|'I','I'), (nul|'J','J'), (nul|'K','K'),
	(nul|'L','L'), (nul|'M','M'), (nul|'N','N'), (nul|'O','O'),
	(nul|'P','P'), (nul|'Q','Q'), (nul|'R','R'), (nul|'S','S'),
	(nul|'T','T'), (nul|'U','U'), (nul|'V','V'), (nul|'W','W'),
	(nul|'X','X'), (nul|'Y','Y'), (nul|'Z','Z'), (nul|'!','!'),
	(nul|'"','"'), (nul|'#','#'), (nul|'$','$'), (nul|'%','%'),
	(nul|'&','&'), ({nul,'\''},'\''), (nul|'(','('), (nul|')',')'),
	(nul|'*','*'), (nul|'+','+'), (nul|',',','), (nul|'-','-'),
	(nul|'.','.'), (nul|'/','/'), (nul|':',':'), (nul|';',';'),
	(nul|'<','<'), (nul|'=','='), (nul|'>','>'), (nul|'?','?'),
	(nul|'@','@'), (nul|'[','['), (nul|'\\','\\'), (nul|']',']'),
	(nul|'^','^'), (nul|'_','_'), (nul|'`','`'), (nul|'{','{'),
	(nul|'|','|'), (nul|'}','}'), (nul|'~','~'), (nul|'\x7f','\x7f')
};

# Restrict AnyOrNul to exclude nul extension for nl, eg (AnyButNlOrNul @@ T) ((nl, out[..] end) | (nul notnl* nl, end))
AnyButNlOrNul = AnyOrNul @@ (any - nl);

#entity = {
#	(`&quot;`, 34),
#	(`&apos;`, 39),
#	(`&amp;`, 38),
#	(`&lt;`, 60),
#	(`&gt;`, 62),
#	(`&nbsp;`, 160),
#	(`&iexcl;`, 161),
#	(`&cent;`, 162),
#	(`&pound;`, 163),
#	(`&curren;`, 164),
#	(`&yen;`, 165),
#	(`&brvbar;`, 166),
#	(`&sect;`, 167),
#	(`&uml;`, 168),
#	(`&copy;`, 169),
#	(`&ordf;`, 170),
#	(`&laquo;`, 171),
#	(`&not;`, 172),
#	(`&shy;`, 173),
#	(`&reg;`, 174),
#	(`&macr;`, 175),
#	(`&deg;`, 176),
#	(`&plusmn;`, 177),
#	(`&sup2;`, 178),
#	(`&sup3;`, 179),
#	(`&acute;`, 180),
#	(`&micro;`, 181),
#	(`&para;`, 182),
#	(`&middot;`, 183),
#	(`&cedil;`, 184),
#	(`&sup1;`, 185),
#	(`&ordm;`, 186),
#	(`&raquo;`, 187),
#	(`&frac14;`, 188),
#	(`&frac12;`, 189),
#	(`&frac34;`, 190),
#	(`&iquest;`, 191),
#	(`&times;`, 215),
#	(`&divide;`, 247),
#	(`&Agrave;`, 192),
#	(`&Aacute;`, 193),
#	(`&Acirc;`, 194),
#	(`&Atilde;`, 195),
#	(`&Auml;`, 196),
#	(`&Aring;`, 197),
#	(`&AElig;`, 198),
#	(`&Ccedil;`, 199),
#	(`&Egrave;`, 200),
#	(`&Eacute;`, 201),
#	(`&Ecirc;`, 202),
#	(`&Euml;`, 203),
#	(`&Igrave;`, 204),
#	(`&Iacute;`, 205),
#	(`&Icirc;`, 206),
#	(`&Iuml;`, 207),
#	(`&ETH;`, 208),
#	(`&Ntilde;`, 209),
#	(`&Ograve;`, 210),
#	(`&Oacute;`, 211),
#	(`&Ocirc;`, 212),
#	(`&Otilde;`, 213),
#	(`&Ouml;`, 214),
#	(`&Oslash;`, 216),
#	(`&Ugrave;`, 217),
#	(`&Uacute;`, 218),
#	(`&Ucirc;`, 219),
#	(`&Uuml;`, 220),
#	(`&Yacute;`, 221),
#	(`&THORN;`, 222),
#	(`&szlig;`, 223),
#	(`&agrave;`, 224),
#	(`&aacute;`, 225),
#	(`&acirc;`, 226),
#	(`&atilde;`, 227),
#	(`&auml;`, 228),
#	(`&aring;`, 229),
#	(`&aelig;`, 230),
#	(`&ccedil;`, 231),
#	(`&egrave;`, 232),
#	(`&eacute;`, 233),
#	(`&ecirc;`, 234),
#	(`&euml;`, 235),
#	(`&igrave;`, 236),
#	(`&iacute;`, 237),
#	(`&icirc;`, 238),
#	(`&iuml;`, 239),
#	(`&eth;`, 240),
#	(`&ntilde;`, 241),
#	(`&ograve;`, 242),
#	(`&oacute;`, 243),
#	(`&ocirc;`, 244),
#	(`&otilde;`, 245),
#	(`&ouml;`, 246),
#	(`&oslash;`, 248),
#	(`&ugrave;`, 249),
#	(`&uacute;`, 250),
#	(`&ucirc;`, 251),
#	(`&uuml;`, 252),
#	(`&yacute;`, 253),
#	(`&thorn;`, 254),
#	(`&yuml;`, 255)
#};
