<!--
 * JRTE is a recursive transduction engine for Java
 *
 * Copyright (C) 2011,2022 Kim Briggs
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received copies of the GNU General Public License
 * and GNU Lesser Public License along with this program.  See
 * LICENSE-gpl-3.0. If not, see
 * <http://www.gnu.org/licenses/>.
-->

<!--
	<property name="jargs" value="-jargs"/>
	<property name="regex.linux.kernel" value="([JFMASOND][a-z]+ [0-9]+ ([0-9]+:)+[0-9]+) ([-.:A-Za-z_0-9]*) kernel: \[[ ]*[0-9]+\.[0-9]+\] (DROPPED|ABORTED|LIMITED) ((IN=([-.:A-Za-z_0-9]*)|OUT=([-.:A-Za-z_0-9]*)|MAC=([-.:A-Za-z_0-9]*)|SRC=([-.:A-Za-z_0-9]*)|DST=([-.:A-Za-z_0-9]*)) )+.* PROTO=([-.:A-Za-z_0-9]*)(.* SPT=([-.:A-Za-z_0-9]*) DPT=([-.:A-Za-z_0-9]*))?"/>
	<property name="jargs.jit.ribose" value="-XX:CompileCommandFile=etc/jit/ribose.jit"/>
	<property name="jargs.gc.ribose" value=""/>
-->

<project name="ribose-build" default="ci-test" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
  <property environment="env"/>
	<property name="ribose.version" value="ribose-0.0.2"/>
  <property name="jdk" value="${env.JAVA_HOME}"/>
	<property name="java.source.dir" value="src"/>
	<property name="java.test.dir" value="test"/>
	<property name="jars.dir" value="jars"/>
	<property name="jars.test.dir" value="${jars.dir}/test"/>
	<property name="build.java" value="build/java"/>
	<property name="build.testenv" value="build/testenv"/>
	<property name="build.java.classes" value="${build.java}/classes"/>
	<property name="build.compiler.model" value="build/compiler"/>
	<property name="build.automata" value="build/automata"/>
	<property name="ribose.patterns" value="patterns/ribose"/>
	<property name="test.patterns" value="patterns/test"/>
	<property name="test.input.dir" value="${build.testenv}/inputs"/>
	<property name="regex.verbosegc" value="cycle-start id=.[0-9]+. type=.scavenge. contextid=.[0-9]+. timestamp=.(?:[0-9]+[-.:T])+[0-9]+. intervalms=.([0-9]+.[0-9]+)[^0-9]"/>
	<property name="regex.nil" value=""/>
	<property name="regex.linuxkernel" value="([JFMASOND][a-z]+ [0-9]+ (?:[0-9]+:)+[0-9]+) ([-.:A-Za-z_0-9]*) kernel: \[[ ]*[0-9]+\.[0-9]+\] (DROPPED|ABORTED|LIMITED) IN=([-.:A-Za-z_0-9]*) OUT=([-.:A-Za-z_0-9]*)(?: MAC=([-.:A-Za-z_0-9]*))? SRC=([-.:A-Za-z_0-9]*) DST=([-.:A-Za-z_0-9]*).* PROTO=([-.:A-Za-z_0-9]*)(?:.* SPT=([-.:A-Za-z_0-9]*) DPT=([-.:A-Za-z_0-9]*))?"/>
	<property name="ribose.inbuffer.size" value="65536"/>
	<property name="ribose.outbuffer.size" value="8196"/>
	<property name="jargs.jit.diagnostic" value="-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompilation -XX:+PrintInlining"/>
	<property name="jargs.jit.inline" value="-XX:CompileCommandFile=etc/jit/ribose.jit"/>
	<property name="jargs.gc.buffers" value="-Dribose.inbuffer.size=${ribose.inbuffer.size} -Dribose.outbuffer.size=${ribose.outbuffer.size}"/>
	<property name="jargs.gc.test" value="-Xms2m ${jargs.gc.buffers} -Xlog:gc*:file=${build.testenv}"/>
	<property name="jargs" value="-ea ${jargs.jit.inline}"/>
	<condition property="linux">
		<os family="unix" />
	</condition>

	<path id="java.classpath">
		<pathelement location="${build.java.classes}"/>
	</path>

	<path id="test.classpath">
		<pathelement location="${build.java}"/>
		<pathelement location="${jars.dir}/${ribose.version}.jar"/>
	</path>

	<path id="testing.classpath">
		<pathelement location="${jars.dir}/${ribose.version}.jar"/>
		<pathelement location="${jars.dir}/${ribose.version}-test.jar"/>
	</path>

	<path id="jrte.classpath">
		<pathelement location="${jars.dir}/${ribose.version}.jar"/>
	</path>

	<target name="clean" depends="clean-java,clean-patterns,clean-test">
  	<delete dir="build"/>
	</target>

	<target name="clean-java">
		<delete dir="${build.java.classes}/com"/>
  	<delete dir="javadoc" includes="**/*"/>
		<delete failonerror="false">
		  <fileset dir="${jars.dir}" includes="*.jar"/>
		</delete>
	</target>

	<target name="clean-patterns">
		<delete dir="${build.compiler.model}"/>
		<delete dir="${build.automata}" />
		<delete failonerror="false">
		  <fileset dir="/tmp" includes="*.ginrout,*.ginrerr"/>
		</delete>
	</target>

	<target name="clean-test">
		<delete file="build/Test.model"/>
		<delete file="build/Test.map"/>
		<delete dir="${build.testenv}"/>
		<delete dir="/tmp" includes="*.gc"/>
	</target>

	<target name="init">
		<tstamp/>
		<exec outputproperty="git.branch" executable="git">
			<arg line="branch --show-current"/>
		</exec>
		<exec outputproperty="git.commit" executable="git">
			<arg line="log --oneline -n 1"/>
		</exec>
		<echo message="Git branch: ${git.branch}"/>
		<echo message="Git commit: ${git.commit}"/>
		<echo message="Version: ${ribose.version}"/>
		<echo message="${ribose.version}" file="version"/>
		<mkdir dir="${build.java.classes}"/>
		<mkdir dir="${build.compiler.model}"/>
		<mkdir dir="${build.automata}"/>
	</target>

	<target name="properties" depends="init">
		<echoproperties/>
	</target>

	<target name="ribose" depends="init,package-java,build-compiler-model,javadoc"
		description="Clean build for java and patterns"/>

	<target name="ci-test" depends="clean,test,env"
		description="Full build with CI tests for java and patterns"/>

	<target name="check-compile-java" depends="init">
		<depend srcdir="${java.source.dir}" destdir="${build.java.classes}" closure="yes">
			<exclude name="**/Test/*.java"/>
		</depend>
	</target>

	<target name="compile-java" depends="check-compile-java">
		<javac fork="true" executable="${jdk}/bin/javac" compiler="modern" includeantruntime="false"
		srcdir="${java.source.dir}" excludes="**/${java.test.dir}/**" destdir="${build.java.classes}"
		debug="true" debuglevel="lines,vars,source">
			<classpath refid="java.classpath"/>
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<target name="check-package-java" depends="compile-java">
		<uptodate targetfile="${jars.dir}/${ribose.version}.jar" property="jar.uptodate">
			<srcfiles dir="${build.java.classes}" excludes="VERSION **/${java.test.dir}/**"/>
			<srcfiles dir="." includes="LICENSE*"/>
		</uptodate>
	</target>

	<target name="package-java" unless="jar.uptodate" depends="check-package-java">
		<copy file="LICENSE-gpl-3.0" todir="${build.java.classes}"/>
		<echo message="Version: ${ribose.version}" file="${build.java.classes}/VERSION" append="false"/>
		<echo message="Git branch:${git.branch}" file="${build.java.classes}/VERSION" append="true"/>
		<echo message="Git commit:${git.commit}" file="${build.java.classes}/VERSION" append="true"/>
		<jar basedir="${build.java.classes}" excludes="**/${java.test.dir}/**" destfile="${jars.dir}/${ribose.version}.jar"/>
	</target>

	<target name="check-javadoc">
		<uptodate targetfile="${jars.dir}/${ribose.version}-api.jar" property="javadoc.uptodate">
			<srcfiles dir="${java.source.dir}" includes="**/*.java" excludes="**/${java.test.dir}/**"/>
			<srcfiles dir="etc/markdown" includes="**/*"/>
			<srcfiles dir="." includes="overview.html"/>
		</uptodate>
	</target>

  <target name="javadoc" unless="javadoc.uptodate" depends="check-javadoc">
  	<delete dir="javadoc" includes="**/*"/>
    <javadoc access="protected" overview="overview.html" source="11" sourcepath="src" destdir="javadoc" splitindex="false"
			use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false"
			packagenames="com.characterforming.ribose.base,com.characterforming.ribose"
			doctitle="The General Idea" failonerror="false" failonwarning="false">
			<group title="Ribose" packages="com.characterforming.ribose*"/>
			<link href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
		</javadoc>
		<copy todir="javadoc" file="etc/markdown/a-b-gears-white.gif"/>
		<jar basedir="javadoc" destfile="jars/${ribose.version}-api.jar"/>
	</target>

	<target name="check-compiler-model">
		<uptodate targetfile="TCompile.model" property="tcompile.uptodate">
			<srcfiles dir="${jars.dir}" includes="${ribose.version}.jar"/>
			<srcfiles dir="${ribose.patterns}" includes="**/*"/>
		</uptodate>
	</target>

	<target name="build-compiler-model" depends="package-java,check-compiler-model" unless="tcompile.uptodate">
		<delete verbose="true">
			<fileset dir="${build.compiler.model}" includes="TCompile.*"/>
		</delete>
		<exec failonerror="true" executable="bash">
			<arg line="etc/sh/patterns ${ribose.patterns} patterns/alpha.inr patterns/after.inr ${build.compiler.model}"/>
		</exec>
		<java fork="true" jvm="${jdk}/bin/java" dir ="." classname="com.characterforming.ribose.TCompile" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="${jargs}"/>
			<arg line="--target com.characterforming.ribose.TCompile ${build.compiler.model} ${build.compiler.model}/TCompile.model"/>
		</java>
		<fixcrlf file="${build.compiler.model}/TCompile.map" eol="lf"/>
		<move file="./TCompile.map" tofile="./TCompile.map.last" failonerror="false" verbose="true"/>
		<move file="./TCompile.model" tofile="./TCompile.model.last" failonerror="false" verbose="true"/>
		<move todir="." verbose="true">
			<fileset dir="${build.compiler.model}" includes="TCompile.*"/>
		</move>
	</target>

	<target name="check-test-patterns" depends="ribose">
		<uptodate targetfile="build/Test.model" property="test.patterns.uptodate">
			<srcfiles dir="patterns" includes="alpha.inr,after.inr,${test.patterns}/*.inr"/>
			<srcfiles dir="${test.patterns}" includes="*.inr"/>
			<srcfiles dir="etc/ginr" includes="ginr*"/>
		</uptodate>
	</target>

	<target name="compile-test-patterns" depends="check-test-patterns" unless="test.patterns.uptodate">
		<exec failonerror="true" executable="bash">
			<arg line="etc/sh/patterns ${test.patterns} patterns/alpha.inr patterns/after.inr ${build.automata}"/>
		</exec>
	</target>

	<target name="check-package-test-patterns" depends="compile-test-patterns">
		<uptodate targetfile="build/Test.model" property="patterns.packaged">
			<srcfiles dir="${build.automata}" includes="**/*.dfa"/>
			<srcfiles file="${jars.dir}/${ribose.version}.jar"/>
		</uptodate>
	</target>

	<target name="package-test-patterns" depends="package-test,check-package-test-patterns" unless="patterns.packaged">
		<delete file="build/Test.model"/>
		<delete file="build/Test.map"/>
		<exec failonerror="true" executable="bash">
			<arg line="etc/sh/compile --target com.characterforming.jrte.test.TestTarget --target-path ${jars.dir}/${ribose.version}-test.jar ${build.automata} build/Test.model"/>
		</exec>
		<fixcrlf file="build/Test.map" eol="lf"/>
	</target>

	<target name="check-compile-test" depends="package-java">
		<depend srcdir="${java.source.dir}" destdir="${build.java.classes}" closure="yes">
			<include name="**/Test/*.java"/>
			<classpath refid="java.classpath"/>
		</depend>
	</target>

	<target name="compile-test" depends="check-compile-test">
		<javac fork="true" executable="${jdk}/bin/javac" compiler="modern" release="11" includeantruntime="false"
		srcdir="${java.source.dir}" destdir="${build.java.classes}" includes="**/${java.test.dir}/**"
		debug="true" debuglevel="lines,vars,source">
			<classpath refid="test.classpath"/>
		</javac>
	</target>

	<target name="check-package-test">
		<uptodate targetfile="${jars.dir}/${ribose.version}-test.jar" property="test.packaged.test">
			 <srcfiles dir="${build.java.classes}" includes="**/test/*.class"/>
	 	</uptodate>
	</target>

	<target name="package-test" depends="package-java,compile-test,check-package-test" unless="test.packaged">
		<jar basedir="${build.java.classes}" includes="**/test/**" destfile="${jars.dir}/${ribose.version}-test.jar"/>
	</target>

	<target name="check-package-source">
		 <uptodate targetfile="${jars.dir}/${ribose.version}-source.jar" property="source.packaged">
			 <srcfiles dir="${build.java.classes}" includes="**/*.class"/>
	 	</uptodate>
	</target>

	<target name="package-source" depends="check-package-source,compile-java" unless="source.packaged">
		<jar basedir="${java.source.dir}" destfile="${jars.dir}/${ribose.version}-source.jar"/>
	</target>

	<target name="test-env" depends="ribose,package-test-patterns,package-test">
		<property environment="env"/>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath">
			<jvmarg line="-version"/>
		</java>
		<echo message="Java @ ${env.JAVA_HOME}"/>
		<echo message="${ant.version}"/>
		<echo message="Ant @ ${env.ANT_HOME}"/>
		<mkdir dir="${build.testenv}"/>
		<mkdir dir="${test.input.dir}"/>
		<unzip src="${test.patterns}/inputs.zip" dest="${test.input.dir}">
			<patternset>
				<include name="dates.txt"/>
				<include name="fib.txt"/>
				<include name="kern-10.log"/>
				<include name="values.txt"/>
				<include name="verbosegc.vgc"/>
			</patternset>
		</unzip>
	</target>

	<target name="test-basic" depends="test-env">
		<echo>Decompile:</echo>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.ribose.TDecompile" classpathref="java.classpath" failonerror="true">
			<jvmarg line="${jargs}"/>
			<arg line="build/Test.model Fibonacci"/>
		</java>
		<echo/>
		<echo>Fibonacci:</echo>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="etc/sh/ribose ${jargs} --target-path ${jars.dir}/${ribose.version}-test.jar --nil build/Test.model Fibonacci ${test.input.dir}/fib.txt"/>
		</exec>
		<echo/>
		<echo>DateExtractor:</echo>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="etc/sh/ribose ${jargs} --target-path ${jars.dir}/${ribose.version}-test.jar --nil build/Test.model DateExtractor ${test.input.dir}/dates.txt"/>
		</exec>
		<echo/>
		<echo>ValuesTest:</echo>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="etc/sh/ribose ${jargs} -Djrte.out.enabled=true --target-path ${jars.dir}/${ribose.version}-test.jar --nil build/Test.model ValuesTest ${test.input.dir}/values.txt"/>
		</exec>
		<echo/>
	</target>

	<target name="test-testrunner" depends="test-env">
		<echo>TestRunner benchmarking (simple fsts driving base transduction effectors):</echo>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.TestRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="build/Test.model 1"/>
		</java>
		<echo/>
	</target>

	<target name="test-filerunner" depends="test-env">
		<echo>FileRunner benchmarking (ribose fsts vs similar regex, input from single buffer in RAM, output muted):</echo>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model LinuxKernelNil ${test.input.dir}/kern-10.log &quot;${regex.linuxkernel}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model LinuxKernelNil ${test.input.dir}/kern-10.log &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model LinuxKernel ${test.input.dir}/kern-10.log &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model LinuxKernelLoose ${test.input.dir}/kern-10.log &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model LinuxKernelStrict ${test.input.dir}/kern-10.log &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model Tintervals ${test.input.dir}/verbosegc.vgc &quot;${regex.verbosegc}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model Tintervals ${test.input.dir}/verbosegc.vgc &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model Sintervals ${test.input.dir}/verbosegc.vgc &quot;${regex.nil}&quot;"/>
		</java>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="testing.classpath" failonerror="true">
			<jvmarg line="${jargs} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil build/Test.model Rintervals ${test.input.dir}/verbosegc.vgc &quot;${regex.nil}&quot;"/>
		</java>
		<echo/>
	</target>

	<target name="test-output-equivalence" depends="test-env">
		<echo>Ribose output equivalence tests with ${ribose.inbuffer.size}b input buffer (showing line and byte counts for input/output files):</echo>
		<echo/>
		<echo message="Reducing ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/vgc.*.out"/>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${test.input.dir}/verbosegc.vgc"/>
		</exec>
		<echo message="RegEx: ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/vgc.regex.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/vgc.regex.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/vgc.regex.gc -Djrte.out.enabled=false -Dregex.out.enabled=true --nil build/Test.model verbosegcregex ${test.input.dir}/verbosegc.vgc &apos;${regex.verbosegc}&apos;"/>
		</exec>
		<echo message="Ribose: Tintervals ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/vgc.tintervals.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/vgc.tintervals.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/vgc.tintervals.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model Tintervals ${test.input.dir}/verbosegc.vgc"/>
		</exec>
		<echo message="Ribose: Sintervals ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/vgc.sintervals.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/vgc.sintervals.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/vgc.sintervals.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model Sintervals ${test.input.dir}/verbosegc.vgc"/>
		</exec>
		<echo message="Ribose: Rintervals ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/vgc.rintervals.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/vgc.rintervals.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/vgc.rintervals.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model Rintervals ${test.input.dir}/verbosegc.vgc"/>
		</exec>
<!-- verbose gc verify -->
		<fixcrlf srcDir="${build.testenv}" includes="vgc.*.out"/>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/vgc.regex.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/vgc.tintervals.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/vgc.sintervals.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/vgc.rintervals.out"/>
		</exec>
		<condition property="intervals.match">
			<and>
				<filesmatch file1="${build.testenv}/vgc.regex.out" file2="${build.testenv}/vgc.tintervals.out"/>
				<filesmatch file1="${build.testenv}/vgc.regex.out" file2="${build.testenv}/vgc.sintervals.out"/>
				<filesmatch file1="${build.testenv}/vgc.regex.out" file2="${build.testenv}/vgc.rintervals.out"/>
			</and>
		</condition>
		<fail unless="intervals.match" message="Not identical: ${build.testenv}/vgc.*.out"/>
		<echo message="Identical: ${build.testenv}/vgc.*.out"/>
		<echo/>
<!-- linux kernel run -->
		<echo message="Reducing ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernel*.out"/>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${test.input.dir}/kern-10.log"/>
		</exec>
		<echo message="Regex: ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernelregex.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/linuxkernelregex.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/linuxkernelregex.gc -Djrte.out.enabled=false -Dregex.out.enabled=true --nil build/Test.model linuxkernelregex ${test.input.dir}/kern-10.log &apos;${regex.linuxkernel}&apos;"/>
		</exec>
		<echo message="Ribose: LinuxKernel ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernel.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/linuxkernel.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/linuxkernel.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model LinuxKernel ${test.input.dir}/kern-10.log"/>
		</exec>
		<echo message="Ribose: LinuxKernelLoose ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernelloose.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/linuxkernelloose.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/linuxkernelloose.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model LinuxKernelLoose ${test.input.dir}/kern-10.log"/>
		</exec>
		<echo message="Ribose: LinuxKernelStrict ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernelstrict.(out,gc)"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/linuxkernelstrict.out">
			<arg value="-c"/>
			<arg value="etc/sh/FileRunner ${jargs} ${jargs.gc.test}/linuxkernelstrict.gc -Djrte.out.enabled=true -Dregex.out.enabled=false --nil build/Test.model LinuxKernelStrict ${test.input.dir}/kern-10.log"/>
		</exec>
<!-- linux kernel verify -->
		<fixcrlf srcDir="${build.testenv}" includes="linuxkernel*.out"/>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/linuxkernelregex.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/linuxkernel.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/linuxkernelloose.out"/>
		</exec>
		<exec failonerror="true" executable="wc">
			<arg line="--lines --bytes ${build.testenv}/linuxkernelstrict.out"/>
		</exec>
		<condition property="kernel.match">
			<and>
				<filesmatch file1="${build.testenv}/linuxkernelregex.out" file2="${build.testenv}/linuxkernel.out"/>
				<filesmatch file1="${build.testenv}/linuxkernelregex.out" file2="${build.testenv}/linuxkernelloose.out"/>
				<filesmatch file1="${build.testenv}/linuxkernelregex.out" file2="${build.testenv}/linuxkernelstrict.out"/>
			</and>
		</condition>
		<fail unless="kernel.match" message="Not identical: ${build.testenv}/linuxkernel*.out"/>
		<echo message="Identical: ${build.testenv}/linuxkernel*.out"/>
	</target>

	<target name="test-heap-metrics" depends="test-output-equivalence">
<!-- verbose gc log transduction G1 pause metrics (megabytes) -->
		<echo message="G1 evacuation pause metrics (megabytes)"/>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="etc/sh/regress --clean ${build.testenv}/vgc.*.gc"/>
		</exec>
<!-- verbose gc log transduction final heap stats -->
		<echo message="Final heap stats:"/>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="grep -o -H 'total [0-9]*K, used [0-9]*K' ${build.testenv}/vgc*.gc"/>
		</exec>
		<echo/>
<!-- linux kernel log transduction G1 pause metrics (megabytes) -->
		<echo message="G1 evacuation pause metrics (megabytes)"/>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="etc/sh/regress --clean ${build.testenv}/linuxkernel*.gc"/>
		</exec>
<!-- linux kernel log transduction final heap stats -->
		<echo message="Final heap size:"/>
		<exec failonerror="true" executable="bash">
			<arg value="-c"/>
			<arg value="grep -o -H 'total [0-9]*K, used [0-9]*K' ${build.testenv}/linuxkernel*.gc"/>
		</exec>
	</target>

	<target name="test" depends="clean-test,test-env,test-basic,test-testrunner,test-filerunner,test-output-equivalence,test-heap-metrics"/>

	<target name="env" if="linux">
		<echo message="os (/proc/version)"/>
		<exec failonerror="false" executable="bash">
			<arg value="-c"/>
			<arg value="cat /proc/version"/>
		</exec>
		<echo message="lscpu"/>
		<exec failonerror="false" executable="lscpu" output="${build.testenv}/lscpu.out"/>
		<exec failonerror="false" executable="grep" input="${build.testenv}/lscpu.out">
			<arg line="-v '^\(Vulnerability\|Flags\)'"/>
		</exec>
	</target>

	<target name="tar-source" depends="clean">
		<delete file="jrte-source.tar.gz"/>
		<tar destfile="jrte-source.tar.gz" compression="gzip">
		<fileset dir=".">
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="${test.patterns}/**"/>
		</fileset>
		</tar>
	</target>

	<target name="tar-project" depends="clean">
		<delete file="jrte.project.tar.gz"/>
		<tar basedir="." destfile="jrte.project.tar.gz" compression="gzip" defaultexcludes="false" excludes="local,build,*.log*,*.tar.gz"/>
	</target>

	<target name="defaultexcludes">
	<defaultexcludes echo="true"/>
	</target>

	<target name="profile-jit" depends="test-env">
		<echo message="TRun: LinuxKernel ${test.input.dir}/kern-10.log -> ${build.testenv}/linuxkernel.jit"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/linuxkernel.jit">
			<arg value="-c"/>
			<arg value="etc/sh/ribose ${jargs} ${jargs.jit.diagnostic} -Djrte.out.enabled=false -Dregex.out.enabled=false
				--target-path ${jars.dir}/${ribose.version}-test.jar --nil build/Test.model LinuxKernel ${test.input.dir}/kern-10.log"/>
		</exec>
		<echo message="TRun: Sintervals ${test.input.dir}/verbosegc.vgc -> ${build.testenv}/sintervals.jit"/>
		<exec failonerror="true" executable="bash" output="${build.testenv}/sintervals.jit">
			<arg value="-c"/>
			<arg value="etc/sh/ribose ${jargs} ${jargs.jit.diagnostic} -Djrte.out.enabled=false -Dregex.out.enabled=false
				--target-path ${jars.dir}/${ribose.version}-test.jar --nil build/Test.model Sintervals ${test.input.dir}/verbosegc.vgc"/>
		</exec>
	</target>

	<target name="debug" depends="test-env">
		<echo message="Nothing to debug"/>
		<java fork="true" jvm="${jdk}/bin/java" dir="." classname="com.characterforming.jrte.test.TestRunner" classpathref="testing.classpath" output="${build.testenv}/testrunner.jit" failonerror="true">
			<jvmarg line="${jargs} ${jargs.jit.diagnostic} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="build/Test.model 1"/>
		</java>
	</target>

</project>
