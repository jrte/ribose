<!--
 * JRTE is a recursive transduction engine for Java
 * 
 * Copyright (C) 2011,2022 Kim Briggs
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received copies of the GNU General Public License
 * and GNU Lesser Public License along with this program.  See 
 * LICENSE-lgpl-3.0 and LICENSE-gpl-3.0. If not, see 
 * <http://www.gnu.org/licenses/>.
-->

<project name="jrte" default="all-clean" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<property name="jrte.version" value="ribose-0.0.0"/>
	<property name="java.source.dir" value="src"/>
	<property name="pattern.source.dir" value="test-patterns"/>
	<property name="java.test.dir" value="test"/>
	<property name="jars.dir" value="jars"/>
	<property name="bin.dir" value="bin"/>
	<property name="jars.test.dir" value="${jars.dir}/test"/>
	<property name="build.java" value="build/java"/>
	<property name="build.java.classes" value="${build.java}/classes"/>
	<property name="build.java.test" value="${build.java}/test"/>
	<property name="build.patterns" value="build/patterns"/>
	<property name="build.patterns.automata" value="build/patterns/automata"/>
	<property name="build.test" value="build/patterns/test"/>
	<property name="regex.linux.kernel" value="([JFMASOND][a-z]+ [0-9]+ ([0-9]+:)+[0-9]+) ([-.:A-Za-z_0-9]*) kernel: \[[ ]*[0-9]+\.[0-9]+\] (DROPPED|ABORTED|LIMITED) ((IN=([-.:A-Za-z_0-9]*)|OUT=([-.:A-Za-z_0-9]*)|MAC=([-.:A-Za-z_0-9]*)|SRC=([-.:A-Za-z_0-9]*)|DST=([-.:A-Za-z_0-9]*)) )+.* PROTO=([-.:A-Za-z_0-9]*)(.* SPT=([-.:A-Za-z_0-9]*) DPT=([-.:A-Za-z_0-9]*))?"/>

	<condition property="archive" value="${user.home}/archive">
		<available type="dir" file="${user.home}/archive"/>
	</condition>

	<path id="java.classpath">
		<pathelement location="${build.java.classes}"/>
	</path>

	<path id="test.classpath">
		<pathelement location="${jars.dir}/${jrte.version}.jar"/>
		<pathelement location="${jars.dir}/${jrte.version}-test.jar"/>
		<pathelement location="${jars.test.dir}/junit-4.8.2.jar"/>
	</path>

	<path id="jrte.classpath">
		<pathelement location="${jars.dir}/${jrte.version}.jar"/>
	</path>

	<target name="clean-java">
		<delete dir="${bin.dir}/com" quiet="true"/>
		<delete dir="${build.java}" quiet="true"/>
		<delete dir="${build.java.test}" quiet="true"/>
		<delete failonerror="false">
		  <fileset dir="${jars.dir}" includes="*.jar"/>
		</delete>
	</target>

	<target name="clean-patterns">
		<delete dir="${build.patterns}" quiet="true"/>
	</target>

	<target name="clean-test">
		<delete failonerror="false">
		  <fileset dir="${build.test}" includes="*.out"/>
		</delete>
	</target>

	<target name="clean" depends="clean-java,clean-patterns,clean-test"/>

	<target name="init">
		<tstamp/>
		<echo message="${ant.version}" />
		<mkdir dir="${build.java.classes}"/>
		<mkdir dir="${build.java.test}"/>
		<mkdir dir="${build.patterns.automata}"/>
		<mkdir dir="${build.test}"/>
	</target>
	
	<target name="properties" depends="init">
		<echoproperties/>
	</target>
		
	<target name="compile-java" depends="init">
		<javac fork="true" includeantruntime="false" srcdir="${java.source.dir}" destdir="${build.java.classes}" release="11"
			 debug="true" debuglevel="lines,vars,source">
			<classpath refid="java.classpath"/>
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<target name="check-package-java">
		<uptodate targetfile="${jars.dir}/${jrte.version}.jar" property="java-packaged">
			<srcfiles dir="${build.java.classes}" includes="**/*.class"/>
		</uptodate>
	</target>

	<target name="package-java" depends="compile-java,check-package-java" unless="${java-packaged}">
		<copy file="LICENSE" todir="${build.java.classes}"/>
		<copy file="LICENSE-gpl-3.0" todir="${build.java.classes}"/>
		<copy file="LICENSE-lgpl-3.0" todir="${build.java.classes}"/>
		<echo file="${build.java.classes}/VERSION" message="${jrte.version}" append="false"/>
		<jar basedir="${build.java.classes}" destfile="${jars.dir}/${jrte.version}.jar"/>
	</target>

	<target name="check-compile-patterns">
		<uptodate targetfile="${build.patterns}/BaseTarget.model" property="patterns-compiled">
			<srcfiles dir="test-patterns" includes="**/*.inr"/>
		</uptodate>
	</target>

	<target name="compile-patterns" depends="init,check-compile-patterns" unless="patterns-compiled">
		<concat destfile="${build.patterns.automata}/_all.inr" eol="lf" force="true">
			<fileset dir="${pattern.source.dir}">
				<include name="alpha.inr"/>
			</fileset>
			<fileset dir="${pattern.source.dir}">
				<include name="*.inr"/>
				<exclude name="alpha.inr"/>
				<exclude name="after.inr"/>
			</fileset>
			<fileset dir="${pattern.source.dir}">
				<include name="after.inr"/>
			</fileset>
		</concat>
		<fixcrlf file="${build.patterns.automata}/_all.inr" eol="lf"/>
		<exec failonerror="false" dir="${build.patterns.automata}" executable="${basedir}/etc/ginr/ginr" input="${build.patterns.automata}/_all.inr" outputproperty="ginr.output"/>
		<echo file="${build.patterns.automata}/_all.out">${ginr.output}</echo>
		<exec failonerror="false" dir="${build.patterns.automata}" executable="/usr/bin/grep" outputproperty="ginr.list">
			<arg line="'^I N R\|^Copyright\|^Distributed under GPLv3\|DFA MIN' _all.out"/>
		</exec>
		<echo>${ginr.list}></echo>
		<echo file="${build.patterns.automata}/_all.out">${ginr.output}</echo>
		<exec failonerror="false" dir="${build.patterns.automata}" executable="/usr/bin/grep" outputproperty="ginr.errors">
			<arg line="'^[ ]*\* \* \*\|^[ ]*\*\*\*\|^Error detected at state [0-9]*:\|^Reserved character:\|^Warning:' _all.out"/>
		</exec>
		<condition property="ginr.fail">
			<not><length string="${ginr.errors}" trim="true" length="0"/></not>
		</condition>
		<echo if:set="ginr.fail" message="&#xA;*** Pattern compilation failed, see ${build.patterns.automata}/_all.out&#xA;${ginr.errors}"/>
		<fail if:set="ginr.fail"/>
	</target>

	<target name="check-package-patterns">
		<uptodate targetfile="${build.patterns}/BaseTarget.model" property="patterns-packaged">
			<srcfiles dir="${java.source.dir}" includes="**/*.java"/>
			<srcfiles dir="${build.patterns}" includes="**/*.dfa"/>
		</uptodate>
	</target>

	<target name="package-patterns" depends="package-java,compile-patterns,check-package-patterns" unless="patterns-packaged">
		<java resultproperty="model-result" fork="true" dir ="." classname="com.characterforming.ribose.Ribose" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="-showversion -ea"/>
			<arg line="--target com.characterforming.jrte.base.BaseTarget ${build.patterns.automata} ${build.patterns}/BaseTarget.model"/>
		</java>
	</target>
	
	 <target name="check-package-test">
		 <uptodate targetfile="${jars.dir}/${jrte.version}-test.jar" property="test-packaged">
			 <srcfiles dir="${build.java.test}" includes="**/*.class"/>
	 	</uptodate>
	</target>

	<target name="compile-test" depends="package-java">
		<javac fork="true" includeantruntime="false" srcdir="${java.test.dir}" destdir="${build.java.test}" release="11"
			debug="true" debuglevel="lines,vars,source">
			<classpath refid="test.classpath"/>
		</javac>
	</target>

	<target name="package-test" depends="package-java,compile-test,check-package-test" unless="test-packaged">
		<jar basedir="${build.java.test}" destfile="${jars.dir}/${jrte.version}-test.jar"/>
	</target>

	<target name="check-package-source">
		 <uptodate targetfile="${jars.dir}/${jrte.version}-source.jar" property="source-packaged">
			 <srcfiles dir="${build.java.classes}" includes="**/*.class"/>
	 	</uptodate>
	</target>

	<target name="package-source" depends="check-package-source,compile-java" unless="source-packaged">
		<jar basedir="${java.source.dir}" destfile="${jars.dir}/${jrte.version}-source.jar"/>
	</target>
	
	<target name="test-ci" depends="clean-test,package-java,package-test,package-patterns">
		<echo>Fibonacci:</echo>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="-ea -Djrte.out.enabled=true"/>
			<arg line="--nil Fibonacci test-patterns/inputs/fib.txt ${build.patterns}/BaseTarget.model"/>
		</java>
		<echo>DateExtractor:</echo>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="-ea -Djrte.out.enabled=true"/>
			<arg line="--nil DateExtractor test-patterns/inputs/dates.txt ${build.patterns}/BaseTarget.model"/>
		</java>
		<echo>TestRunner (benchmarking simple fsts driving base transduction effectors):</echo>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.TestRunner" classpathref="test.classpath" failonerror="true">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="${build.patterns}/BaseTarget.model 1"/>
		</java>
		<echo>Ribose (benchmarking fsts for extracting data from noisy inputs, vs similar regex, output muted):</echo>
		<exec failonerror="false" dir="test-patterns/inputs" executable="wc">
			<arg line="kern-10.log"/>
		</exec>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil LinuxKernelNil test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil LinuxKernel test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="--nil LinuxKernelLoose test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="--nil LinuxKernelStrict test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<exec failonerror="false" dir="test-patterns/inputs" executable="wc">
			<arg line="verbosegc.vgc"/>
		</exec>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="--nil Tintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="--nil Sintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="/dev/null">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="--nil Tintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<echo>Ribose (output equivalence tests):</echo>
		<delete quiet="true" file="${build.test}/Tintervals.regex.out"/>
		<delete quiet="true" file="${build.test}/Tintervals.jrte.out"/>
		<delete quiet="true" file="${build.test}/Sintervals.jrte.out"/>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="${build.test}/Tintervals.jrte.out">
				<jvmarg line="-ea -Djrte.out.enabled=true -Dregex.out.enabled=false"/>
				<arg line="--nil Tintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/Tintervals.jrte.out"/>
		</exec>		
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="${build.test}/Sintervals.jrte.out">
				<jvmarg line="-ea -Djrte.out.enabled=true -Dregex.out.enabled=false"/>
				<arg line="--nil Sintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/Sintervals.jrte.out"/>
		</exec>	
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="${build.test}/Tintervals.regex.out">
				<jvmarg line="-ea -Djrte.out.enabled=false -Dregex.out.enabled=true"/>
				<arg line="--nil Tintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model &quot;cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+.[0-9]+)[^0-9]&quot;"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/Tintervals.regex.out"/>
		</exec>		
		<condition property="intervals.match">
			<and>
				<filesmatch file1="${build.test}/Tintervals.regex.out" file2="${build.test}/Sintervals.jrte.out"/>
				<filesmatch file1="${build.test}/Sintervals.jrte.out" file2="${build.test}/Tintervals.jrte.out"/>
			</and>
		</condition>
		<fail unless="intervals.match" message="^^^Not identical"/>
		<echo message="^^^ Identical"/>
		<delete quiet="true" file="${build.test}/LinuxKernel.regex.out"/>
		<delete quiet="true" file="${build.test}/LinuxKernel.jrte.out"/>
		<delete quiet="true" file="${build.test}/LinuxKernelLoose.jrte.out"/>
		<delete quiet="true" file="${build.test}/LinuxKernelStrict.jrte.out"/>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true" output="${build.test}/LinuxKernel.regex.out">
				<jvmarg line="-ea -Dregex.out.enabled=true"/>
				<arg line="--nil LinuxKernel test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/LinuxKernel.regex.out"/>
		</exec>		
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true" output="${build.test}/LinuxKernel.jrte.out">
				<jvmarg line="-ea -Djrte.out.enabled=true"/>
				<arg line="--nil LinuxKernel test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/LinuxKernel.jrte.out"/>
		</exec>		
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true" output="${build.test}/LinuxKernelLoose.jrte.out">
				<jvmarg line="-ea -Djrte.out.enabled=true"/>
				<arg line="--nil LinuxKernelLoose test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/LinuxKernelLoose.jrte.out"/>
		</exec>		
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true" output="${build.test}/LinuxKernelStrict.jrte.out">
				<jvmarg line="-ea -Djrte.out.enabled=true"/>
				<arg line="--nil LinuxKernelStrict test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="${build.test}/LinuxKernelStrict.jrte.out"/>
		</exec>		
		<condition property="kernel.match">
			<and>
				<filesmatch file1="${build.test}/LinuxKernel.regex.out" file2="${build.test}/LinuxKernel.jrte.out"/>
				<filesmatch file1="${build.test}/LinuxKernel.jrte.out" file2="${build.test}/LinuxKernelLoose.jrte.out"/>
				<filesmatch file1="${build.test}/LinuxKernelLoose.jrte.out" file2="${build.test}/LinuxKernelStrict.jrte.out"/>
			</and>
		</condition>
		<fail unless="kernel.match" message="^^^ Not identical"/>
		<echo message="^^^ Identical"/>
		<echo>java -version</echo>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="test.classpath">
				<jvmarg line="-version"/>
		</java>		
		<echo>lscpu</echo>
		<exec failonerror="false" executable="lscpu" output="/tmp/lscpu.out"/>
		<exec failonerror="false" executable="grep" input="/tmp/lscpu.out">
			<arg line="-v '^\(Vulnerability\|Flags\)'"/>
		</exec>
		<delete failonerror="false" file="/tmp/lscpu.out"/>
	</target>
	
	<target name="test-gc" depends="clean-test,package-java,package-test,package-patterns">
		<echo>JVM Heap (see memory leakage in simple fsts driving base transduction effectors):</echo>
		<java fork="true" dir ="." classname="com.characterforming.jrte.test.TestRunner" classpathref="test.classpath" failonerror="true">
				<jvmarg line="-ea -Xms12m -Xlog:gc=trace:file=${build.test}/TestRunner-gc.out -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
				<arg line="${build.patterns}/BaseTarget.model"/>
		</java>
		<echo message="^^^ TestRunner *: -Xms12m -Xlog:gc=trace:file=${build.test}/TestRunner-gc.out"/>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true">
				<jvmarg line="-ea -Xms22m -Xlog:gc=trace:file=${build.test}/LinuxKernel-gc.out -Djrte.out.enabled=false"/>
				<arg line="--nil LinuxKernel test-patterns/inputs/kern-10.log ${build.patterns}/BaseTarget.model"/>
		</java>
		<echo message="^^^ LinuxKernel *: -Xms22m -Xlog:gc=trace:file=${build.test}/LinuxKernel-gc.out"/>
		<java fork="true" dir ="." classname="com.characterforming.ribose.RiboseRuntime" classpathref="jrte.classpath" failonerror="true">
				<jvmarg line="-ea -Xms10m -Xlog:gc=trace:file=${build.test}/Tintervals-gc.out -Djrte.out.enabled=false"/>
				<arg line="--nil Tintervals test-patterns/inputs/verbosegc.vgc ${build.patterns}/BaseTarget.model"/>
		</java>
		<echo message="^^^ Tintervals *: -Xms10m -Xlog:gc=trace:file=${build.test}/Tintervals-gc.out"/>
	</target>
		
	<target name="tar-source" depends="clean">
		<delete quiet="true" file="jrte-source.tar.gz"/>
		<tar destfile="jrte-source.tar.gz" compression="gzip">
		<fileset dir=".">
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="test-patterns/**"/>
		</fileset>
		</tar>
	</target>

	<target name="tar-project" depends="clean">
		<delete quiet="true" file="jrte.project.tar.gz"/>
		<tar basedir="." destfile="jrte.project.tar.gz" compression="gzip" defaultexcludes="false" excludes="local,build,*.log*,*.tar.gz"/>
	</target>

	<target name="all-clean" depends="clean,test-ci" description="Full build for java and patterns"/>
	
	<target name="defaultexcludes">
	<defaultexcludes echo="true"/>
	</target>
</project>
