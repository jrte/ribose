<!--
 * JRTE is a recursive transduction engine for Java
 * 
 * Copyright (C) 2011,2022 Kim Briggs
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received copies of the GNU General Public License
 * and GNU Lesser Public License along with this program.  See 
 * LICENSE-lgpl-3.0 and LICENSE-gpl-3.0. If not, see 
 * <http://www.gnu.org/licenses/>.
-->

<project name="ribose-build" default="ci-test" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<property name="ribose.version" value="ribose-0.0.0"/>
	<property name="java.source.dir" value="src"/>
	<property name="pattern.source.dir" value="patterns/test"/>
	<property name="java.test.dir" value="test"/>
	<property name="jars.dir" value="jars"/>
	<property name="bin.dir" value="bin"/>
	<property name="jars.test.dir" value="${jars.dir}/test"/>
	<property name="build.java" value="build/java"/>
	<property name="build.java.classes" value="${build.java}/classes"/>
	<property name="build.java.test" value="${build.java}/test"/>
	<property name="build.patterns" value="build/patterns"/>
	<property name="build.patterns.automata" value="build/patterns/automata"/>
	<property name="build.test" value="build/test"/>
	<property name="regex.linux.kernel" value="([JFMASOND][a-z]+ [0-9]+ (?:[0-9]+:)+[0-9]+) ([-.:A-Za-z_0-9]*) kernel: \[[ ]*[0-9]+\.[0-9]+\] (DROPPED|ABORTED|LIMITED) IN=([-.:A-Za-z_0-9]*) OUT=([-.:A-Za-z_0-9]*)(?: MAC=([-.:A-Za-z_0-9]*))? SRC=([-.:A-Za-z_0-9]*) DST=([-.:A-Za-z_0-9]*).* PROTO=([-.:A-Za-z_0-9]*)(?:.* SPT=([-.:A-Za-z_0-9]*) DPT=([-.:A-Za-z_0-9]*))?"/>
	<property name="jargs.jit.ribose" value="-XX:CompileCommandFile=etc/jit/ribose.jit"/>
	<property name="ribose.block.size" value="65536"/>
	<property name="ea" value="-ea"/>
<!--
	<property name="ea" value="-ea"/>
	<property name="regex.linux.kernel" value="([JFMASOND][a-z]+ [0-9]+ ([0-9]+:)+[0-9]+) ([-.:A-Za-z_0-9]*) kernel: \[[ ]*[0-9]+\.[0-9]+\] (DROPPED|ABORTED|LIMITED) ((IN=([-.:A-Za-z_0-9]*)|OUT=([-.:A-Za-z_0-9]*)|MAC=([-.:A-Za-z_0-9]*)|SRC=([-.:A-Za-z_0-9]*)|DST=([-.:A-Za-z_0-9]*)) )+.* PROTO=([-.:A-Za-z_0-9]*)(.* SPT=([-.:A-Za-z_0-9]*) DPT=([-.:A-Za-z_0-9]*))?"/>
	<property name="jargs.jit.ribose" value="-XX:CompileCommandFile=etc/jit/ribose.jit"/>
	<property name="jargs.gc.ribose" value=""/>
-->
	<condition property="archive" value="${user.home}/archive">
		<available type="dir" file="${user.home}/archive"/>
	</condition>

	<path id="java.classpath">
		<pathelement location="${build.java.classes}"/>
	</path>

	<path id="test.classpath">
		<pathelement location="${jars.dir}/${ribose.version}.jar"/>
		<pathelement location="${jars.dir}/${ribose.version}-test.jar"/>
	</path>

	<path id="jrte.classpath">
		<pathelement location="${jars.dir}/${ribose.version}.jar"/>
	</path>

	<target name="clean" depends="clean-java,clean-patterns,clean-test">
		<touch file="patterns/ribose/Automaton.inr"/>
		<delete dir="build/ribose" quiet="true"/>
	</target>

	<target name="init">
		<tstamp/>
		<exec outputproperty="git.branch" executable="/usr/bin/git">
			<arg line="branch --show-current"/>
		</exec>
		<echo file="${build.java.classes}/VERSION" message="Git commit:" append="true"/>
		<exec outputproperty="git.commit" executable="/usr/bin/git">
			<arg line="log -1 --format='%H'"/>
		</exec>
		<echo message="Git branch:${git.branch}"/>
		<echo message="Git commit:${git.commit}"/>
		<echo message="Version: ${ribose.version}"/>
		<mkdir dir="${build.java.classes}"/>
		<mkdir dir="${build.java.test}"/>
		<mkdir dir="${build.patterns.automata}"/>
		<mkdir dir="${build.test}"/>
		<mkdir dir="build/ribose/automata"/>
		<uptodate targetfile="./TCompile.model" property="tcompile.uptodate">
			<srcfiles dir="${java.source.dir}" includes="**/*.*"/>
			<srcfiles dir="patterns/ribose" includes="**/*"/>
		</uptodate>
	</target>
	
	<target name="properties" depends="init">
		<echoproperties/>
	</target>
		
	<target name="ribose" depends="init,package-java,build-compiler-model,javadoc" 
		description="Clean build for java and patterns"/>
	
	<target name="ci-test" depends="clean,test" 
		description="Full build with CI tests for java and patterns"/>
	
	<target name="build-compiler-model" unless="tcompile.uptodate" depends="package-java">
		<exec failonerror="true" executable="/bin/bash">
			<arg line="etc/sh/patterns patterns/ribose patterns/alpha.inr patterns/after.inr build/ribose/automata"/>
		</exec>
		<java fork="true" dir ="." classname="com.characterforming.ribose.TCompile" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="${ea}"/>
			<arg line="--target com.characterforming.ribose.TCompile build/ribose/automata build/ribose/TCompile.model"/>
		</java>
		<echo message="./TCompile.(map,model) -> ./TCompile.(map,model).last"/>
		<move file="./TCompile.map" tofile="./TCompile.map.last" failonerror="false" verbose="true"/>
		<move file="./TCompile.model" tofile="./TCompile.model.last" failonerror="false" verbose="true"/>
		<echo message="build/ribose/TCompile.(map,model) -> ./TCompile.(map,model)"/>
		<move file="build/ribose/TCompile.map" tofile="./TCompile.map" preservelastmodified="true" failonerror="false" verbose="true"/>
		<move file="build/ribose/TCompile.model" tofile="./TCompile.model" preservelastmodified="true" failonerror="false" verbose="true"/>
	</target>

	<target name="clean-java">
		<delete dir="${bin.dir}/com" quiet="true"/>
		<delete dir="${build.java}" quiet="true"/>
		<delete dir="${build.java.test}" quiet="true"/>
		<delete failonerror="false">
		  <fileset dir="${jars.dir}" includes="*.jar"/>
		</delete>
	</target>

	<target name="clean-patterns">
		<delete dir="${build.patterns}" quiet="true"/>
		<delete file="build/Test.model" quiet="true"/>
	</target>

	<target name="clean-test">
		<delete failonerror="false">
		  <fileset dir="${build.test}" includes="*.out"/>
		</delete>
	</target>

	<target name="compile-java" depends="init">
		<javac fork="true" includeantruntime="false" srcdir="${java.source.dir}" destdir="${build.java.classes}" release="11"
			 debug="true" debuglevel="lines,vars,source">
			<classpath refid="java.classpath"/>
			<compilerarg value="-Xlint"/>
		</javac>
	</target>

	<target name="check-package-java">
		<uptodate targetfile="${jars.dir}/${ribose.version}.jar" property="java.uptodate">
			<srcfiles dir="${build.java.classes}" includes="**/*.class"/>
			<srcfiles dir="." includes="LICENSE*"/>
		</uptodate>
	</target>

	<target name="package-java" depends="compile-java,check-package-java" unless="java.uptodate">
		<copy file="LICENSE" todir="${build.java.classes}"/>
		<copy file="LICENSE-gpl-3.0" todir="${build.java.classes}"/>
		<copy file="LICENSE-lgpl-3.0" todir="${build.java.classes}"/>
		<echo message="Version: ${ribose.version}" file="${build.java.classes}/VERSION" append="false"/>
		<echo message="Git branch:${git.branch}" file="${build.java.classes}/VERSION" append="true"/>
		<echo message="Git commit:${git.commit}" file="${build.java.classes}/VERSION" append="true"/>
		<jar basedir="${build.java.classes}" destfile="${jars.dir}/${ribose.version}.jar"/>
	</target>

	<target name="check-javadoc">
		<uptodate targetfile="${jars.dir}/${ribose.version}-api.jar" property="javadoc.uptodate">
			<srcfiles dir="${java.source.dir}" includes="**/*.java"/>
			<srcfiles dir="etc/javadoc" includes="**/*"/>
		</uptodate>
	</target>

  <target unless="javadoc.uptodate" name="javadoc" depends="check-javadoc">
  	<delete quiet="true" dir="javadoc" includes="*"/>
    <javadoc access="protected" overview="overview.html" source="11" sourcepath="src" destdir="javadoc" splitindex="false" 
			use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
			packagenames="com.characterforming.ribose.base,com.characterforming.ribose"
			doctitle="The General Idea">
			<group title="Ribose" packages="com.characterforming.ribose*"/>
			<link href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
		</javadoc>
		<copy todir="javadoc/resources">
			<fileset dir="etc/javadoc/api/resources">
				<include name="*"/>
			</fileset>
			<fileset dir="etc/javadoc">
				<include name="*.png"/>
			</fileset>
		</copy>
		<jar basedir="javadoc" destfile="jars/${ribose.version}-api.jar"/>
	</target>

	<target name="check-test-patterns" depends="ribose">
		<uptodate targetfile="build/Test.model" property="test.patterns.jar.uptodate">
			<srcfiles file="${jars.dir}/${ribose.version}.jar"/>
		</uptodate>
		<uptodate targetfile="build/Test.model" property="test.patterns.inr.uptodate">
			<srcfiles dir="patterns/test" includes="**/*.inr"/>
		</uptodate>
		<condition property="test.patterns.uptodate">
			<and>
				<isset property="test.patterns.jar.uptodate"/>
				<isset property="test.patterns.inr.uptodate"/>
			</and>
		</condition>
	</target>

	<target name="compile-test-patterns" depends="check-test-patterns" unless="test.patterns.uptodate">
		<exec failonerror="true" executable="/bin/bash">
			<arg line="etc/sh/patterns patterns/test patterns/alpha.inr patterns/after.inr ${build.patterns.automata}"/>
		</exec>
	</target>

	<target name="check-package-test-patterns" depends="compile-test-patterns">
		<uptodate targetfile="build/Test.model" property="patterns.packaged">
			<srcfiles dir="${build.patterns}" includes="**/*.dfa"/>
			<srcfiles file="build/Test.model"/>
		</uptodate>
	</target>

	<target name="package-test-patterns" depends="check-package-test-patterns" unless="patterns.packaged">
		<java fork="true" dir="." classname="com.characterforming.ribose.TCompile" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="${ea}"/>
			<arg line="--target com.characterforming.ribose.TRun ${build.patterns.automata} build/Test.model"/>
		</java>
	</target>
	
	<target name="compile-test" depends="package-java">
		<javac fork="true" includeantruntime="false" srcdir="${java.test.dir}" destdir="${build.java.test}" release="11"
			debug="true" debuglevel="lines,vars,source">
			<classpath refid="test.classpath"/>
		</javac>
	</target>

	<target name="check-package-test">
		 <uptodate targetfile="${jars.dir}/${ribose.version}-test.jar" property="test.packaged">
			 <srcfiles dir="${build.java.test}" includes="**/*.class"/>
	 	</uptodate>
	</target>

	<target name="package-test" depends="package-java,compile-test,check-package-test" unless="test.packaged">
		<jar basedir="${build.java.test}" destfile="${jars.dir}/${ribose.version}-test.jar"/>
	</target>

	<target name="check-package-source">
		 <uptodate targetfile="${jars.dir}/${ribose.version}-source.jar" property="source.packaged">
			 <srcfiles dir="${build.java.classes}" includes="**/*.class"/>
	 	</uptodate>
	</target>

	<target name="package-source" depends="check-package-source,compile-java" unless="source.packaged">
		<jar basedir="${java.source.dir}" destfile="${jars.dir}/${ribose.version}-source.jar"/>
	</target>
	
	<target name="test" depends="ribose,package-test-patterns,package-test">
		<echo>Fibonacci:</echo>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=true"/>
			<arg line="--nil Fibonacci patterns/test/inputs/fib.txt build/Test.model"/>
		</java>
		<echo>DateExtractor:</echo>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=true"/>
			<arg line="--nil DateExtractor patterns/test/inputs/dates.txt build/Test.model"/>
		</java>
		<echo>TestRunner benchmarking (simple fsts driving base transduction effectors):</echo>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.TestRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false"/>
			<arg line="build/Test.model 1"/>
		</java>
		<echo>FileRunner benchmarking (fsts for extracting data from noisy inputs, vs similar regex, output muted):</echo>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernelNil patterns/test/inputs/kern-10.log build/Test.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernel patterns/test/inputs/kern-10.log build/Test.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernelLoose patterns/test/inputs/kern-10.log build/Test.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernelStrict patterns/test/inputs/kern-10.log build/Test.model &quot;${regex.linux.kernel}&quot;"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil Tintervals patterns/test/inputs/verbosegc.vgc build/Test.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil Sintervals patterns/test/inputs/verbosegc.vgc build/Test.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="/dev/null">
			<jvmarg line="${ea} -Djrte.out.enabled=false -Dregex.out.enabled=false ${jargs.jit.ribose}"/>
			<arg line="--nil Tintervals patterns/test/inputs/verbosegc.vgc build/Test.model cycle-start.id=.*type=.*contextid=.*timestamp=.*intervalms=.([0-9]+'.'[0-9]+)[^0-9]"/>
		</java>
		<echo>Ribose output equivalence tests (showing "lines words bytes path" wc output for input/output files): [${ribose.block.size}b block size]</echo>
		<delete quiet="true" dir="/tmp">
			<include name="vgc.verbosegc*.out"/>
			<include name="vgc.verbosegc*.err"/>
			<include name="vgc.verbosegc*.gc"/>
		</delete>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="patterns/test/inputs/verbosegc.vgc"/>
		</exec>		
		<echo message="Regex: -Xms2m -Xlog:gc*:file=/tmp/vgc.regex.gc -> /tmp/vgc.regex.out"/>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="/tmp/vgc.regex.out" error="/tmp/vgc.regex.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/vgc.regex.gc -Djrte.out.enabled=false -Dregex.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil Tintervals patterns/test/inputs/verbosegc.vgc build/Test.model &quot;cycle-start id=.[0-9]+. type=.scavenge. contextid=.[0-9]+. timestamp=.(?:[0-9]+[-.:T])+[0-9]+. intervalms=.([0-9]+.[0-9]+)[^0-9]&quot;" />
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/vgc.regex.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/vgc.regex.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="vgc.regex.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/vgc.regex.gc"/>
		</exec>		
		<echo message="${vgc.regex.gc} G1 evacuation pauses"/>
		<echo message="TRun: Tintervals -Xms2m -Xlog:gc*:file=/tmp/vgc.tintervals.gc -> /tmp/vgc.tintervals.out"/>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true" output="/tmp/vgc.tintervals.out" error="/tmp/vgc.tintervals.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/vgc.tintervals.gc -Dribose.block.size=${ribose.block.size} -Djrte.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil Tintervals patterns/test/inputs/verbosegc.vgc build/Test.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/vgc.tintervals.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/vgc.tintervals.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="vgc.tintervals.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/vgc.tintervals.gc"/>
		</exec>		
		<echo message="${vgc.tintervals.gc} G1 evacuation pauses"/>
		<echo message="TRun: Sintervals -Xms2m -Xlog:gc*:file=/tmp/vgc.sintervals.gc -> /tmp/vgc.sintervals.out"/>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true" output="/tmp/vgc.sintervals.out" error="/tmp/vgc.sintervals.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/vgc.sintervals.gc -Dribose.block.size=${ribose.block.size} -Djrte.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil Sintervals patterns/test/inputs/verbosegc.vgc build/Test.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/vgc.sintervals.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/vgc.sintervals.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="vgc.sintervals.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/vgc.sintervals.gc"/>
		</exec>		
		<echo message="${vgc.sintervals.gc} G1 evacuation pauses"/>
		<condition property="intervals.match">
			<and>
				<filesmatch file1="${build.test}/vgc.regex.out" file2="${build.test}/vgc.sintervals.out"/>
				<filesmatch file1="${build.test}/vgc.sintervals.out" file2="${build.test}/vgc.tintervals.out"/>
			</and>
		</condition>
		<fail unless="intervals.match" message="^^^ Not identical"/>
		<delete quiet="true" dir="/tmp">
			<include name="linuxkernel*.out"/>
			<include name="linuxkernel*.err"/>
			<include name="linuxkernel*.gc"/>
		</delete>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="patterns/test/inputs/kern-10.log"/>
		</exec>		
		<echo message="Regex: -Xms2m -Xlog:gc*:file=/tmp/linuxkernelregex.gc -> /tmp/linuxkernelregex.out"/>
		<java fork="true" dir="." classname="com.characterforming.jrte.test.FileRunner" classpathref="test.classpath" failonerror="true" output="/tmp/linuxkernelregex.out" error="/tmp/linuxkernelregex.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/linuxkernelregex.gc -Djrte.out.enabled=false -Dregex.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernel patterns/test/inputs/kern-10.log build/Test.model &quot;${regex.linux.kernel}&quot;" />
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/linuxkernelregex.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/linuxkernelregex.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="linuxkernelregex.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/linuxkernelregex.gc"/>
		</exec>		
		<echo message="${linuxkernelregex.gc} G1 evacuation pauses"/>
		<echo message="TRun: LinuxKernel -Xms2m -Xlog:gc*:file=/tmp/linuxkernel.gc -> /tmp/linuxkernel.out"/>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true" output="/tmp/linuxkernel.out" error="/tmp/linuxkernel.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/linuxkernel.gc -Dribose.block.size=${ribose.block.size} -Djrte.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernel patterns/test/inputs/kern-10.log build/Test.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/linuxkernel.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/linuxkernel.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="linuxkernel.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/linuxkernel.gc"/>
		</exec>		
		<echo message="${linuxkernel.gc} G1 evacuation pauses"/>
		<echo message="TRun: LinuxKernelLoose -Xms2m -Xlog:gc*:file=/tmp/linuxkernelloose.gc -> /tmp/linuxkernelloose.out"/>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true" output="/tmp/linuxkernelloose.out" error="/tmp/linuxkernelloose.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/linuxkernelloose.gc -Dribose.block.size=${ribose.block.size} -Djrte.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernelLoose patterns/test/inputs/kern-10.log build/Test.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/linuxkernelloose.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/linuxkernelloose.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="linuxkernelloose.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/linuxkernelloose.gc"/>
		</exec>		
		<echo message="${linuxkernelloose.gc} G1 evacuation pauses"/>
		<echo message="TRun: LinuxKernelStrict -Xms2m -Xlog:gc*:file=/tmp/linuxkernelstrict.gc -> /tmp/linuxkernelstrict.out"/>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="jrte.classpath" failonerror="true" output="/tmp/linuxkernelstrict.out" error="/tmp/linuxkernelstrict.err">
			<jvmarg line="${ea} -Xms2m -Xlog:gc*:file=/tmp/linuxkernelstrict.gc -Dribose.block.size=${ribose.block.size} -Djrte.out.enabled=true ${jargs.jit.ribose}"/>
			<arg line="--nil LinuxKernelStrict patterns/test/inputs/kern-10.log build/Test.model"/>
		</java>
		<exec failonerror="true" executable="/usr/bin/wc">
			<arg line="/tmp/linuxkernelstrict.out"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep">
			<arg line="'gc,heap,exit' /tmp/linuxkernelstrict.gc"/>
		</exec>		
		<exec failonerror="true" executable="/usr/bin/grep" outputproperty="linuxkernelstrict.gc">
			<arg line="-c 'G1 Evacuation Pause.*->' /tmp/linuxkernelstrict.gc"/>
		</exec>		
		<echo message="${linuxkernelstrict.gc} G1 evacuation pauses"/>
		<condition property="kernel.match">
			<and>
				<filesmatch file1="log.regex.out" file2="log.linuxkernel.out"/>
				<filesmatch file1="log.linuxkernel.out" file2="log.linuxkernelloose.out"/>
				<filesmatch file1="log.linuxkernelloose.out" file2="log.linuxkernelstrict.out"/>
			</and>
		</condition>
		<fail unless="kernel.match" message="^^^ Not identical"/>
		<echo message="GC logs"/>
		<path id="tmp">
		  <fileset dir="/tmp">
		    <include name="*.gc"/>
		  </fileset>
		</path>
		<pathconvert pathsep=" " property="tmp.gc" refid="tmp"/>	
		<exec failonerror="true" executable="/usr/bin/stat">
			<arg line="--printf '%s bytes\t%n\n' ${tmp.gc}"/>
		</exec>		
		<echo message="${ant.version}"/>
		<echo>java -version</echo>
		<java fork="true" dir="." classname="com.characterforming.ribose.TRun" classpathref="test.classpath">
			<jvmarg line="-version"/>
		</java>		
		<echo>lscpu</echo>
		<exec failonerror="false" executable="lscpu" output="/tmp/lscpu.out"/>
		<exec failonerror="false" executable="grep" input="/tmp/lscpu.out">
			<arg line="-v '^\(Vulnerability\|Flags\)'"/>
		</exec>
		<delete failonerror="false" file="/tmp/lscpu.out"/>
	</target>
	
	<target name="tar-source" depends="clean">
		<delete quiet="true" file="jrte-source.tar.gz"/>
		<tar destfile="jrte-source.tar.gz" compression="gzip">
		<fileset dir=".">
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="patterns/test/**"/>
		</fileset>
		</tar>
	</target>

	<target name="tar-project" depends="clean">
		<delete quiet="true" file="jrte.project.tar.gz"/>
		<tar basedir="." destfile="jrte.project.tar.gz" compression="gzip" defaultexcludes="false" excludes="local,build,*.log*,*.tar.gz"/>
	</target>

	<target name="defaultexcludes">
	<defaultexcludes echo="true"/>
	</target>
</project>
