#May 15 07:58:52 kb-ubuntu kernel: [ 1794.599801] DROPPED IN=eth0 OUT= MAC=01:00:5e:00:00:fb:00:13:20:c0:36:32:08:00 SRC=192.168.144.101 DST=224.0.0.251 LEN=32 TOS=0x00 PREC=0x00 TTL=1 ID=8596 OPT (94040000) PROTO=2

### LinuxKernel
# This will extract up to 10 field values from iptables log messages in a Linux kernel log
# containing mixed messages from various sources. Input is reduced in a single pass without
# lookahead, fields extracted from iptables messages are reordered for output to stdout.
###

value = {alpha, digit, punct}*;

timestamp = upper lower+ space digit digit? space (digit digit ':')+ digit digit;

header = (
	(timestamp @@ PasteAny)
	(space, select[`~hostname`])
	(value @@ PasteAny)
	(space 'kernel: [' space* digit+ '.' digit+ space* ']')
);

tag = (space, select[`~tag`]) (('DROPPED' | 'LIMITED' | 'ABORTED') @@ PasteAny);

field = (
	(
		('IN=', select[`~in`])
	|	('OUT=', select[`~out`])
	|	('MAC=', select[`~macaddress`])
	|	('SRC=', select[`~srcip`])
	|	('DST=', select[`~dstip`])
	|	('SPT=', select[`~srcport`])
	|	('DPT=', select[`~dstport`])
	|	('PROTO=', select[`~protocol`])
	)
	(value @@ PasteAny)
);

fields = ((field || value) space)*;
iptables = header tag space fields;

a0 = (iptables$0):alph;
a1 = (iptables$1):alph;
a2 = (iptables$2):alph;

(`*** LinuxKernel: tape alphabets not disjoint`
	((a0&a1) | (a1&a2) | (a2&a0))
):enum;

null = (
	(
			((AnyOrNul* @ iptables)$(0 1 2))
		@	((a0$(0,0))* (a1$(0,,0))* (a2$(0,,,0))*)*
			(nul$(0,0)) (nul* a0* a1* a2*)*
	)
	(byte - nl)*
);

save = out[`~timestamp` '|' `~hostname` '|' `~tag` '|' `~in` '|' `~out`
 '|' `~macaddress` '|' `~srcip` '|' `~dstip` '|' `~protocol`
 '|' `~srcport` '|' `~dstport` `\n`
];

continue = clear[`~*`] select[`~timestamp`];

LinuxKernel = (
	(nil, continue)
	(
		iptables (nl, save continue)
	|	null? (nl, continue)
	)*
):dfamin;

### LinuxKernelStrict
# This will mark input at start of line and look ahead using the input patterns of 3 transducers
# describing lines of interest up to and including nl. If any of these patterns match the entire
# line, the input is reset to the mark and the matching transducer is started to consume the line.
# If nul is signaled in the matching pass it will be caught and the entire line will be consumed
# without effect.
###

LinuxKernelDropped = (
	header (space, select[`~tag`]) ('DROPPED' @@ PasteAny) fields (nl, save signal[`!nil`] stop)
):dfamin;

LinuxKernelLimited = (
	header (space, select[`~tag`]) ('LIMITED' @@ PasteAny) fields (nl, save signal[`!nil`] stop)
):dfamin;

LinuxKernelAborted = (
	header (space, select[`~tag`]) ('ABORTED' @@ PasteAny) fields (nl, save signal[`!nil`] stop)
):dfamin;

dropped = LinuxKernelDropped$0;
limited = LinuxKernelLimited$0;
aborted = LinuxKernelAborted$0;

iptables = (dropped | limited | aborted) / nl;
null = ((iptables:pref) - iptables) nul (byte - nl)*;
next = reset continue;

LinuxKernelStrict = (
	(
		(nil, mark)
		(
			(dropped, next start[`@LinuxKernelDropped`])
		|	(limited, next start[`@LinuxKernelLimited`])
		|	(aborted, next start[`@LinuxKernelAborted`])
		| (null nl, signal[`!nil`])
		)?
	)*
):dfamin;

### LinuxKernelLoose
# This will mark and look ahead only far enough to select a capable transducer
# or skip a line.
###

LinuxKernelCapture = (
	LinuxKernelDropped | LinuxKernelLimited | LinuxKernelAborted
):dfamin;

type = (header tag)$0;
null = ((type:pref) - type) nul (byte - nl)*;

LinuxKernelLoose = (
	(
		(nil, mark)
		(
			(type, next start[`@LinuxKernelCapture`])
		|	(null nl, signal[`!nil`])
		)?
	)*
):dfamin;

### LinuxKernelNil
# Recognizer for kernel log
###

LinuxKernelNil = (
	(LinuxKernel$0) (eos, stop)
):dfamin;

LinuxKernelDropped:save `build/automata/LinuxKernelDropped.dfa`;
LinuxKernelDropped$(0,1 2):prsseq `build/automata/LinuxKernelDropped.pr`;
LinuxKernelLimited:save `build/automata/LinuxKernelLimited.dfa`;
LinuxKernelLimited$(0,1 2):prsseq `build/automata/LinuxKernelLimited.pr`;
LinuxKernelAborted:save `build/automata/LinuxKernelAborted.dfa`;
LinuxKernelAborted$(0,1 2):prsseq `build/automata/LinuxKernelAborted.pr`;
LinuxKernelLoose:save `build/automata/LinuxKernelLoose.dfa`;
LinuxKernelLoose$(0,1 2):prsseq `build/automata/LinuxKernelLoose.pr`;
LinuxKernelStrict:save `build/automata/LinuxKernelStrict.dfa`;
LinuxKernelStrict$(0,1 2):prsseq `build/automata/LinuxKernelStrict.pr`;
LinuxKernelCapture:save `build/automata/LinuxKernelCapture.dfa`;
LinuxKernelCapture$(0,1 2):prsseq `build/automata/LinuxKernelCapture.pr`;
LinuxKernelNil:save `build/automata/LinuxKernelNil.dfa`;
LinuxKernelNil$(0,1 2):prsseq `build/automata/LinuxKernelNil.pr`;
LinuxKernel:save `build/automata/LinuxKernel.dfa`;
LinuxKernel$(0,1 2):prsseq `build/automata/LinuxKernel.pr`;
